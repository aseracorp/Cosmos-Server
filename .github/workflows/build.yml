#
name: Build and Publish release

# Configures this workflow to run every time a change is pushed to the branch called `master`.
on:
  push:
    branches: [ "master", "unstable" ]
  pull_request:
    branches: [ "master", "unstable" ]

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BUILD_VERSION: "head"

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      # 
    steps:
      - name: Set environment variables
        run: |
            echo 'export VERSION=$(jq -r .version package.json)' >> $BASH_ENV
            echo 'export PKG_NAME=cosmos-cloud' >> $BASH_ENV
            echo 'export MAINTAINER_NAME="Yann Stepienik"' >> $BASH_ENV
            echo 'export MAINTAINER_EMAIL="cosmoscloudsup@gmail.com"' >> $BASH_ENV
            source $BASH_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'amd64,arm64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: install go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'

      - name: install node
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: install dependencies
        run: |
            sudo apt-get install bash curl
            npm install

      - name: Download GeoLite2-Country database
        run: |
            curl -s -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=$MAX_TOKEN&suffix=tar.gz" -o GeoLite2-Country.tar.gz
            tar -xzf GeoLite2-Country.tar.gz --strip-components 1 --wildcards "*.mmdb"

      - name: Download and Extract ARM Nebula Binary
        run: |
            curl -LO https://github.com/slackhq/nebula/releases/download/v1.8.2/nebula-linux-arm64.tar.gz
            tar -xzvf nebula-linux-arm64.tar.gz

      - name: Rename ARM Nebula Binary
        run: |
            mv nebula nebula-arm
            mv nebula-cert nebula-arm-cert

      - name: Download and Extract Nebula Binary
        run: |
            curl -LO https://github.com/slackhq/nebula/releases/download/v1.8.2/nebula-linux-amd64.tar.gz
            tar -xzvf nebula-linux-amd64.tar.gz

      - name: Build UI
        run: npm run client-build

#      - name: Build and publish dockerfiles
#        run: sh docker.sh

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'unstable') }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
#          cache-from: type=local,src=/tmp/.buildx-cache
#          cache-to: type=local,dest=/tmp/.buildx-cache
      
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Prepare package structure
        run: |
            mkdir -p ${PKG_NAME}-${VERSION}
            cp -r build/* ${PKG_NAME}-${VERSION}/
            rm ${PKG_NAME}-${VERSION}/cosmos-launcher-arm64
            rm ${PKG_NAME}-${VERSION}/cosmos-arm64
            rm ${PKG_NAME}-${VERSION}/nebula-arm
            rm ${PKG_NAME}-${VERSION}/nebula-arm-cert

      - name: Prepare ARM64 package structure
        run: |
            mkdir -p ${PKG_NAME}-${VERSION}-arm64
            cp -r build/* ${PKG_NAME}-${VERSION}-arm64/
            mv ${PKG_NAME}-${VERSION}-arm64/nebula-arm ${PKG_NAME}-${VERSION}-arm64/nebula
            mv ${PKG_NAME}-${VERSION}-arm64/nebula-arm-cert ${PKG_NAME}-${VERSION}-arm64/nebula-cert
            mv ${PKG_NAME}-${VERSION}-arm64/cosmos-arm64 ${PKG_NAME}-${VERSION}-arm64/cosmos
            mv ${PKG_NAME}-${VERSION}-arm64/cosmos-launcher-arm64 ${PKG_NAME}-${VERSION}-arm64/cosmos-launcher

      - name: Create .zip packages
        run: |
            zip -r ${PKG_NAME}-${VERSION}-amd64.zip ${PKG_NAME}-${VERSION}
            zip -r ${PKG_NAME}-${VERSION}-arm64.zip ${PKG_NAME}-${VERSION}-arm64

      - name: Generate MD5 hashes
        run: |
            md5sum ${PKG_NAME}-${VERSION}-amd64.zip > ${PKG_NAME}-${VERSION}-amd64.zip.md5
            md5sum ${PKG_NAME}-${VERSION}-arm64.zip > ${PKG_NAME}-${VERSION}-arm64.zip.md5

      - name: Create GitHub Release
        run: |
            VERSION=$(jq -r .version package.json)
            PKG_NAME=cosmos-cloud
           
            # Get current branch name
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
           
            if [ "$BRANCH_NAME" = "master" ] || [ "$BRANCH_NAME" = "main" ]; then
              gh release create v$VERSION \
                ${PKG_NAME}-${VERSION}-amd64.zip \
                ${PKG_NAME}-${VERSION}-amd64.zip.md5 \
                ${PKG_NAME}-${VERSION}-arm64.zip \
                ${PKG_NAME}-${VERSION}-arm64.zip.md5 \
                --title "Release $VERSION" \
                --notes "Release version $VERSION for x86_64 and ARM64 architectures"
            else
              gh release create v$VERSION \
                ${PKG_NAME}-${VERSION}-amd64.zip \
                ${PKG_NAME}-${VERSION}-amd64.zip.md5 \
                ${PKG_NAME}-${VERSION}-arm64.zip \
                ${PKG_NAME}-${VERSION}-arm64.zip.md5 \
                --prerelease \
                --title "Beta Release $VERSION" \
                --notes "Beta release version $VERSION for x86_64 and ARM64 architectures from branch $BRANCH_NAME"
            fi
      
